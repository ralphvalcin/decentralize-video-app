apiVersion: apps/v1
kind: Deployment
metadata:
  name: video-chat-backend
  namespace: video-chat
  labels:
    app.kubernetes.io/name: video-chat
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "2.0.0"
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: video-chat
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: video-chat
        app.kubernetes.io/component: backend
        app.kubernetes.io/version: "2.0.0"
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5001"
        prometheus.io/path: "/metrics"
        # Config hash for rolling restarts on config changes
        checksum/config: "{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: video-chat-backend
      terminationGracePeriodSeconds: 60
      containers:
      - name: backend
        image: ghcr.io/YOUR_USERNAME/decentralized-video-app-backend:v2.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 5001
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: NODE_ENV
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: FRONTEND_URL
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: REDIS_PORT
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: AWS_REGION
        - name: CLUSTER_REGION
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: CLUSTER_REGION
        - name: IS_PRIMARY_REGION
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: IS_PRIMARY_REGION
        # Cross-region sync configuration
        - name: CROSS_REGION_SYNC_ENABLED
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: CROSS_REGION_SYNC_ENABLED
        - name: PRIMARY_REDIS_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: PRIMARY_REDIS_ENDPOINT
        - name: SECONDARY_REGIONS
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: SECONDARY_REGIONS
        # Global Accelerator endpoint for cross-region signaling
        - name: GLOBAL_ACCELERATOR_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: video-chat-config
              key: GLOBAL_ACCELERATOR_ENDPOINT
        # Secrets
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: video-chat-secrets
              key: JWT_SECRET
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: video-chat-secrets
              key: REDIS_PASSWORD
        - name: REDIS_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: video-chat-secrets
              key: REDIS_AUTH_TOKEN
        # WebRTC optimization settings
        - name: MAX_CONNECTIONS_PER_POD
          value: "100"
        - name: CONNECTION_TIMEOUT
          value: "30000"
        - name: HEARTBEAT_INTERVAL
          value: "25000"
        - name: HEARTBEAT_TIMEOUT
          value: "5000"
        # Performance monitoring
        - name: ENABLE_METRICS
          value: "true"
        - name: METRICS_PORT
          value: "5001"
        - name: METRICS_PATH
          value: "/metrics"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        # Startup probe for slower initial startup
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        # Graceful shutdown
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: logs
        emptyDir:
          sizeLimit: 500Mi
      - name: cache
        emptyDir:
          sizeLimit: 200Mi
      # Node affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - m5.large
                - m5a.large
                - c5.large
                - c5a.large
      # Tolerations for spot instances
      tolerations:
      - key: spot-instance
        operator: Equal
        value: "true"
        effect: NoSchedule
      - key: kubernetes.io/arch
        operator: Equal
        value: amd64
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: video-chat-backend-service
  namespace: video-chat
  labels:
    app.kubernetes.io/name: video-chat
    app.kubernetes.io/component: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internal"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    # Cross-zone load balancing for better availability
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    # Connection draining for graceful shutdowns
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
spec:
  type: LoadBalancer
  ports:
  - port: 5001
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: video-chat
    app.kubernetes.io/component: backend
---
# Service Account for backend pods
apiVersion: v1
kind: ServiceAccount
metadata:
  name: video-chat-backend
  namespace: video-chat
  labels:
    app.kubernetes.io/name: video-chat
    app.kubernetes.io/component: backend
  annotations:
    # IRSA annotation for AWS access
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/video-chat-backend-role
---
# Network Policy for backend security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: video-chat-backend-netpol
  namespace: video-chat
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from ALB
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 5001
  # Allow traffic from frontend pods
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: frontend
    ports:
    - protocol: TCP
      port: 5001
  # Allow traffic from monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 5001
  egress:
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow Redis access
  - to: []
    ports:
    - protocol: TCP
      port: 6379
  # Allow HTTPS outbound (for external APIs)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80